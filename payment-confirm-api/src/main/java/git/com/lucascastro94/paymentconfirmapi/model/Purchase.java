package git.com.lucascastro94.paymentconfirmapi.model; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Purchase extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6865573106748268191L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Purchase\",\"fields\":[{\"name\":\"purchaseID\",\"type\":\"int\"},{\"name\":\"creditCard\",\"type\":\"string\"},{\"name\":\"namePrinted\",\"type\":\"string\"},{\"name\":\"validityCard\",\"type\":\"string\"},{\"name\":\"codSec\",\"type\":\"int\"},{\"name\":\"valueOfPayment\",\"type\":\"float\"},{\"name\":\"installments\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Purchase> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Purchase> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Purchase> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Purchase> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Purchase> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Purchase to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Purchase from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Purchase instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Purchase fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int purchaseID;
  private java.lang.CharSequence creditCard;
  private java.lang.CharSequence namePrinted;
  private java.lang.CharSequence validityCard;
  private int codSec;
  private float valueOfPayment;
  private int installments;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Purchase() {}

  /**
   * All-args constructor.
   * @param purchaseID The new value for purchaseID
   * @param creditCard The new value for creditCard
   * @param namePrinted The new value for namePrinted
   * @param validityCard The new value for validityCard
   * @param codSec The new value for codSec
   * @param valueOfPayment The new value for valueOfPayment
   * @param installments The new value for installments
   */
  public Purchase(java.lang.Integer purchaseID, java.lang.CharSequence creditCard, java.lang.CharSequence namePrinted, java.lang.CharSequence validityCard, java.lang.Integer codSec, java.lang.Float valueOfPayment, java.lang.Integer installments) {
    this.purchaseID = purchaseID;
    this.creditCard = creditCard;
    this.namePrinted = namePrinted;
    this.validityCard = validityCard;
    this.codSec = codSec;
    this.valueOfPayment = valueOfPayment;
    this.installments = installments;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return purchaseID;
    case 1: return creditCard;
    case 2: return namePrinted;
    case 3: return validityCard;
    case 4: return codSec;
    case 5: return valueOfPayment;
    case 6: return installments;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: purchaseID = (java.lang.Integer)value$; break;
    case 1: creditCard = (java.lang.CharSequence)value$; break;
    case 2: namePrinted = (java.lang.CharSequence)value$; break;
    case 3: validityCard = (java.lang.CharSequence)value$; break;
    case 4: codSec = (java.lang.Integer)value$; break;
    case 5: valueOfPayment = (java.lang.Float)value$; break;
    case 6: installments = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'purchaseID' field.
   * @return The value of the 'purchaseID' field.
   */
  public int getPurchaseID() {
    return purchaseID;
  }


  /**
   * Sets the value of the 'purchaseID' field.
   * @param value the value to set.
   */
  public void setPurchaseID(int value) {
    this.purchaseID = value;
  }

  /**
   * Gets the value of the 'creditCard' field.
   * @return The value of the 'creditCard' field.
   */
  public java.lang.CharSequence getCreditCard() {
    return creditCard;
  }


  /**
   * Sets the value of the 'creditCard' field.
   * @param value the value to set.
   */
  public void setCreditCard(java.lang.CharSequence value) {
    this.creditCard = value;
  }

  /**
   * Gets the value of the 'namePrinted' field.
   * @return The value of the 'namePrinted' field.
   */
  public java.lang.CharSequence getNamePrinted() {
    return namePrinted;
  }


  /**
   * Sets the value of the 'namePrinted' field.
   * @param value the value to set.
   */
  public void setNamePrinted(java.lang.CharSequence value) {
    this.namePrinted = value;
  }

  /**
   * Gets the value of the 'validityCard' field.
   * @return The value of the 'validityCard' field.
   */
  public java.lang.CharSequence getValidityCard() {
    return validityCard;
  }


  /**
   * Sets the value of the 'validityCard' field.
   * @param value the value to set.
   */
  public void setValidityCard(java.lang.CharSequence value) {
    this.validityCard = value;
  }

  /**
   * Gets the value of the 'codSec' field.
   * @return The value of the 'codSec' field.
   */
  public int getCodSec() {
    return codSec;
  }


  /**
   * Sets the value of the 'codSec' field.
   * @param value the value to set.
   */
  public void setCodSec(int value) {
    this.codSec = value;
  }

  /**
   * Gets the value of the 'valueOfPayment' field.
   * @return The value of the 'valueOfPayment' field.
   */
  public float getValueOfPayment() {
    return valueOfPayment;
  }


  /**
   * Sets the value of the 'valueOfPayment' field.
   * @param value the value to set.
   */
  public void setValueOfPayment(float value) {
    this.valueOfPayment = value;
  }

  /**
   * Gets the value of the 'installments' field.
   * @return The value of the 'installments' field.
   */
  public int getInstallments() {
    return installments;
  }


  /**
   * Sets the value of the 'installments' field.
   * @param value the value to set.
   */
  public void setInstallments(int value) {
    this.installments = value;
  }

  /**
   * Creates a new Purchase RecordBuilder.
   * @return A new Purchase RecordBuilder
   */
  public static Purchase.Builder newBuilder() {
    return new Purchase.Builder();
  }

  /**
   * Creates a new Purchase RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Purchase RecordBuilder
   */
  public static Purchase.Builder newBuilder(Purchase.Builder other) {
    if (other == null) {
      return new Purchase.Builder();
    } else {
      return new Purchase.Builder(other);
    }
  }

  /**
   * Creates a new Purchase RecordBuilder by copying an existing Purchase instance.
   * @param other The existing instance to copy.
   * @return A new Purchase RecordBuilder
   */
  public static Purchase.Builder newBuilder(Purchase other) {
    if (other == null) {
      return new Purchase.Builder();
    } else {
      return new Purchase.Builder(other);
    }
  }

  /**
   * RecordBuilder for Purchase instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Purchase>
    implements org.apache.avro.data.RecordBuilder<Purchase> {

    private int purchaseID;
    private java.lang.CharSequence creditCard;
    private java.lang.CharSequence namePrinted;
    private java.lang.CharSequence validityCard;
    private int codSec;
    private float valueOfPayment;
    private int installments;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Purchase.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.purchaseID)) {
        this.purchaseID = data().deepCopy(fields()[0].schema(), other.purchaseID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.creditCard)) {
        this.creditCard = data().deepCopy(fields()[1].schema(), other.creditCard);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.namePrinted)) {
        this.namePrinted = data().deepCopy(fields()[2].schema(), other.namePrinted);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.validityCard)) {
        this.validityCard = data().deepCopy(fields()[3].schema(), other.validityCard);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.codSec)) {
        this.codSec = data().deepCopy(fields()[4].schema(), other.codSec);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.valueOfPayment)) {
        this.valueOfPayment = data().deepCopy(fields()[5].schema(), other.valueOfPayment);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.installments)) {
        this.installments = data().deepCopy(fields()[6].schema(), other.installments);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Purchase instance
     * @param other The existing instance to copy.
     */
    private Builder(Purchase other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.purchaseID)) {
        this.purchaseID = data().deepCopy(fields()[0].schema(), other.purchaseID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.creditCard)) {
        this.creditCard = data().deepCopy(fields()[1].schema(), other.creditCard);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.namePrinted)) {
        this.namePrinted = data().deepCopy(fields()[2].schema(), other.namePrinted);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validityCard)) {
        this.validityCard = data().deepCopy(fields()[3].schema(), other.validityCard);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.codSec)) {
        this.codSec = data().deepCopy(fields()[4].schema(), other.codSec);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valueOfPayment)) {
        this.valueOfPayment = data().deepCopy(fields()[5].schema(), other.valueOfPayment);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.installments)) {
        this.installments = data().deepCopy(fields()[6].schema(), other.installments);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'purchaseID' field.
      * @return The value.
      */
    public int getPurchaseID() {
      return purchaseID;
    }


    /**
      * Sets the value of the 'purchaseID' field.
      * @param value The value of 'purchaseID'.
      * @return This builder.
      */
    public Purchase.Builder setPurchaseID(int value) {
      validate(fields()[0], value);
      this.purchaseID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'purchaseID' field has been set.
      * @return True if the 'purchaseID' field has been set, false otherwise.
      */
    public boolean hasPurchaseID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'purchaseID' field.
      * @return This builder.
      */
    public Purchase.Builder clearPurchaseID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditCard' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreditCard() {
      return creditCard;
    }


    /**
      * Sets the value of the 'creditCard' field.
      * @param value The value of 'creditCard'.
      * @return This builder.
      */
    public Purchase.Builder setCreditCard(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.creditCard = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'creditCard' field has been set.
      * @return True if the 'creditCard' field has been set, false otherwise.
      */
    public boolean hasCreditCard() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'creditCard' field.
      * @return This builder.
      */
    public Purchase.Builder clearCreditCard() {
      creditCard = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'namePrinted' field.
      * @return The value.
      */
    public java.lang.CharSequence getNamePrinted() {
      return namePrinted;
    }


    /**
      * Sets the value of the 'namePrinted' field.
      * @param value The value of 'namePrinted'.
      * @return This builder.
      */
    public Purchase.Builder setNamePrinted(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.namePrinted = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'namePrinted' field has been set.
      * @return True if the 'namePrinted' field has been set, false otherwise.
      */
    public boolean hasNamePrinted() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'namePrinted' field.
      * @return This builder.
      */
    public Purchase.Builder clearNamePrinted() {
      namePrinted = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validityCard' field.
      * @return The value.
      */
    public java.lang.CharSequence getValidityCard() {
      return validityCard;
    }


    /**
      * Sets the value of the 'validityCard' field.
      * @param value The value of 'validityCard'.
      * @return This builder.
      */
    public Purchase.Builder setValidityCard(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.validityCard = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validityCard' field has been set.
      * @return True if the 'validityCard' field has been set, false otherwise.
      */
    public boolean hasValidityCard() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validityCard' field.
      * @return This builder.
      */
    public Purchase.Builder clearValidityCard() {
      validityCard = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'codSec' field.
      * @return The value.
      */
    public int getCodSec() {
      return codSec;
    }


    /**
      * Sets the value of the 'codSec' field.
      * @param value The value of 'codSec'.
      * @return This builder.
      */
    public Purchase.Builder setCodSec(int value) {
      validate(fields()[4], value);
      this.codSec = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'codSec' field has been set.
      * @return True if the 'codSec' field has been set, false otherwise.
      */
    public boolean hasCodSec() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'codSec' field.
      * @return This builder.
      */
    public Purchase.Builder clearCodSec() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueOfPayment' field.
      * @return The value.
      */
    public float getValueOfPayment() {
      return valueOfPayment;
    }


    /**
      * Sets the value of the 'valueOfPayment' field.
      * @param value The value of 'valueOfPayment'.
      * @return This builder.
      */
    public Purchase.Builder setValueOfPayment(float value) {
      validate(fields()[5], value);
      this.valueOfPayment = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'valueOfPayment' field has been set.
      * @return True if the 'valueOfPayment' field has been set, false otherwise.
      */
    public boolean hasValueOfPayment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'valueOfPayment' field.
      * @return This builder.
      */
    public Purchase.Builder clearValueOfPayment() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'installments' field.
      * @return The value.
      */
    public int getInstallments() {
      return installments;
    }


    /**
      * Sets the value of the 'installments' field.
      * @param value The value of 'installments'.
      * @return This builder.
      */
    public Purchase.Builder setInstallments(int value) {
      validate(fields()[6], value);
      this.installments = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'installments' field has been set.
      * @return True if the 'installments' field has been set, false otherwise.
      */
    public boolean hasInstallments() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'installments' field.
      * @return This builder.
      */
    public Purchase.Builder clearInstallments() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Purchase build() {
      try {
        Purchase record = new Purchase();
        record.purchaseID = fieldSetFlags()[0] ? this.purchaseID : (java.lang.Integer) defaultValue(fields()[0]);
        record.creditCard = fieldSetFlags()[1] ? this.creditCard : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.namePrinted = fieldSetFlags()[2] ? this.namePrinted : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.validityCard = fieldSetFlags()[3] ? this.validityCard : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.codSec = fieldSetFlags()[4] ? this.codSec : (java.lang.Integer) defaultValue(fields()[4]);
        record.valueOfPayment = fieldSetFlags()[5] ? this.valueOfPayment : (java.lang.Float) defaultValue(fields()[5]);
        record.installments = fieldSetFlags()[6] ? this.installments : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Purchase>
    WRITER$ = (org.apache.avro.io.DatumWriter<Purchase>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Purchase>
    READER$ = (org.apache.avro.io.DatumReader<Purchase>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.purchaseID);

    out.writeString(this.creditCard);

    out.writeString(this.namePrinted);

    out.writeString(this.validityCard);

    out.writeInt(this.codSec);

    out.writeFloat(this.valueOfPayment);

    out.writeInt(this.installments);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.purchaseID = in.readInt();

      this.creditCard = in.readString(this.creditCard instanceof Utf8 ? (Utf8)this.creditCard : null);

      this.namePrinted = in.readString(this.namePrinted instanceof Utf8 ? (Utf8)this.namePrinted : null);

      this.validityCard = in.readString(this.validityCard instanceof Utf8 ? (Utf8)this.validityCard : null);

      this.codSec = in.readInt();

      this.valueOfPayment = in.readFloat();

      this.installments = in.readInt();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.purchaseID = in.readInt();
          break;

        case 1:
          this.creditCard = in.readString(this.creditCard instanceof Utf8 ? (Utf8)this.creditCard : null);
          break;

        case 2:
          this.namePrinted = in.readString(this.namePrinted instanceof Utf8 ? (Utf8)this.namePrinted : null);
          break;

        case 3:
          this.validityCard = in.readString(this.validityCard instanceof Utf8 ? (Utf8)this.validityCard : null);
          break;

        case 4:
          this.codSec = in.readInt();
          break;

        case 5:
          this.valueOfPayment = in.readFloat();
          break;

        case 6:
          this.installments = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










